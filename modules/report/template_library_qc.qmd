# Nanobody library QC

```{r}
#| echo: false
#| message: false
#| warning: false
# annoyingly, we need to source our pre-render script for each chapter in the book
source("./template/pre_render_script.R")
```

As a quick quality control, it is good to check a few basic features of the nanobody libraries (as opposed to the sequencing libraries, which were covered in the last section).\

## Productivity

We expect the overwhelming majority of reads (\>90%) to be productive, as these nanobodies come from immunised alpacas. A high level of unproductive reads might indicate problems in cloning, or sequencing errors.

<details class="secondaryDetails">

<summary>What makes a read productive?</summary>

<p>

Reads are classified as productive according to the [AIRR specifications](https://docs.airr-community.org/en/stable/datarep/rearrangements.html#fields). They must have:

-   V and J gene alignments in frame

-   no stop codon

-   no frameshift in the V region (relative to the reference)

    </p>

</details>

```{r, message=FALSE}
# read in all files ending with _productivity_categories.tsv
productivity_data <- vroom(fs::dir_ls(glob = "*_productivity_categories.tsv"))

# just subset out % productive for plotting
productivity_data %>%
    filter(productive == TRUE) -> percent_productive

# plot it
ggplot(percent_productive, aes(y = percentage, x = sample_id)) +
    geom_col(fill = "#DC7F9B") +
    ylab("% Productive") +
    xlab("Sample ID") +
    theme(axis.text.x = element_text(angle = 90, size = 10, vjust = 0.5)) +
    ggtitle("Percentage of productive reads per sample")
```

::: {.callout-note appearance="simple"}
From here on, only productive reads will be considered in the analysis\
:::

## V, D and J genes {#sec-vdjgenes}

What we're looking for here is to see a good distribution of the genes across the libraries (a very colourful plot).

<details class="secondaryDetails">

<summary>What if our plot isn't so colourful?</summary>

<p>If we see certain libraries being made up of almost all a single V (or D or J) gene, then that is a sign that the library may be highly duplicated. This is not necessarily a bad thing, particularly for round 2 samples, but in general we would like to see it kept to a minimum.</p>

</details>

```{r, message=FALSE, warning=FALSE}
# read in all files ending with _v_calls.tsv
v_calls <- vroom(fs::dir_ls(glob = "*_v_calls.tsv"))
v_calls %>%
    mutate(v_gene = str_remove(v_call, "\\*.*$")) %>% # strip extra text from names
    group_by(sample_id, v_gene) %>%
    summarise(v_gene_percentage = sum(percentage), across()) %>%
    filter(str_detect(v_gene, "IGHV3")) %>%
    filter(v_gene_percentage >= 5) -> v_calls_clean

# plot it
ggplot(v_calls_clean, aes(y = v_gene_percentage, x = sample_id, fill = v_gene)) +
    geom_col() +
    ylab("% V Gene Usage") +
    xlab("Sample ID") +
    scale_fill_manual(values = colour_palette) +
    theme(axis.text.x = element_text(angle = 90, size = 8, vjust = 0.5)) +
    ggtitle("V Gene Usage", subtitle = "Only V genes with at least 5% are shown")
```

```{r, message=FALSE}
# read in all files ending with _d_calls.tsv
d_calls <- vroom(fs::dir_ls(glob = "*_d_calls.tsv")) %>% filter(d_call != "d_call")

# plot it
ggplot(d_calls, aes(y = percentage, x = sample_id, fill = d_call)) +
    geom_col() +
    ylab("% D Gene Usage") +
    xlab("Sample ID") +
    scale_fill_manual(values = colour_palette) +
    theme(axis.text.x = element_text(angle = 90, size = 8, vjust = 0.5)) +
    ggtitle("D Gene Usage")
```

```{r, message=FALSE}
# read in all files ending with _j_calls.tsv
j_calls <- vroom(fs::dir_ls(glob = "*_j_calls.tsv")) %>% filter(j_call != "j_call")

# plot it
ggplot(j_calls, aes(y = percentage, x = sample_id, fill = j_call)) +
    geom_col() +
    ylab("% J Gene Usage") +
    xlab("Sample ID") +
    scale_fill_manual(values = rev(colour_palette)) +
    ggtitle("J Gene Usage") +
    theme(axis.text.x = element_text(angle = 90, size = 8, vjust = 0.5))
```

## Saturation curves {#sec-saturation}

Ideally, we would like to sequence our nanobody libraries to saturation (see all nanobody sequences that are present). This will allow us to estimate the sequence diversity, as well as to adopt a conservative filtering approach (excluding CDR3s with a count of 1) to reduce the impact of sequencing errors. We can check whether our sequencing is at saturation by plotting a [saturation curve](https://kb.10xgenomics.com/hc/en-us/articles/115005062366-What-is-sequencing-saturation-): taking random samples of size $x$ from the library, and counting how many unique CDR3s are identified, $y$. **If sequencing is at saturation, the curve will 'flatten out'** (come to an asymptote) once we have seen all of the possible unique CDR3s in the library. The $y$ value of this asymptote represents the diversity of the nanobody library.

<details class="secondaryDetails">

<summary>What are we looking for in these plots?</summary>

<p>We want to see that the curves flatten out! If they don't, this means that there are not enough reads to sequence that library to saturation. The filtering strategy may need to be adjusted, or you may have trouble identifying rare clones. Note that the curves sometimes look a bit 'jagged', but this is nothing to worry about (to save time, we only simulate once to create the plot. It would be smoother if we did multiple simulations and averaged them, but I don't think it's necessary.</p>

</details>

```{r}
#| layout-ncol: 2
#| fig-dpi: 80
#| message: false
#| warning: false

# read in data
saturation_plot_data <- vroom(fs::dir_ls(glob = "*_saturation_plot_data.tsv"))

plot_list <- list()
for(i in seq_along(unique(saturation_plot_data$sample_num))){
    this_sample <- unique(saturation_plot_data$sample_num)[i]
    this_data <- filter(saturation_plot_data, sample_num == this_sample)
    this_plot <- ggplot(this_data, aes(x = sample_size, y = number_unique)) +
        geom_point(col = "#e83e8c") +
        geom_line(col = "#e83e8c") +
        labs(x = "Number of reads sampled", y = "Number of unique CDR3s") +
        ggtitle(paste0("Saturation curve for ", this_sample, ", CDR3s with a count of 1 removed"))
    plot_list[[this_sample]] <- this_plot

}
for(i in seq_along(plot_list)){
    print(plot_list[[i]])
}
```

## Estimated library diversity {#sec-diversity}

Using the data from the saturation curves, we can estimate the diversity of our nanobody libraries:

<details class="secondaryDetails">

<summary>How was this estimated?</summary>

<p>The diversity of the library is the asymptote of the saturation curve, but reading the asymptotes is laborious, so as a quick heuristic we can find the point at which the first derivative (gradient) of the saturation curve is at its lowest positive value (when the curve reaches its asymptote, the gradient will be zero)</p>

</details>

```{r}
#| echo: false
#| message: false
#| warning: false
saturation_plot_data %>%
    filter(number_unique > 0, derivative > 0) %>%
    group_by(sample_num) %>%
    summarise( # choose the diversity at the lowest value of the derivative
        approx_diversity = number_unique[which.min(derivative)])  %>%
    mutate(approx_diversity = case_when(
        approx_diversity >= 1000000 ~ plyr::round_any(approx_diversity, 100000),
        approx_diversity >= 100000 ~ plyr::round_any(approx_diversity, 10000),
        approx_diversity >= 10000 ~ plyr::round_any(approx_diversity, 1000),
        approx_diversity >= 1000 ~ plyr::round_any(approx_diversity, 100),
        approx_diversity >= 100 ~ plyr::round_any(approx_diversity, 10)
    )) %>%
    # now make a pretty table with gt so it's easy to read
    left_join(metadata, by = "sample_num") %>%
    select(-contains("id")) %>%
    gt() %>%
    opt_interactive(
        use_highlight = TRUE, # highlight rows as you hover
        use_filters = TRUE,
        use_compact_mode = TRUE) %>%
    tab_options(
        ihtml.use_page_size_select = TRUE, # choose page size
        ihtml.page_size_default = 10,
        ihtml.page_size_values = c(5, 10, 20, 30)) %>%
    tab_header(
        title = "Estimated diversity of nanobody libraries",
        subtitle = "Estimates generated from the first derivative of the saturation curve") %>%
    cols_label(
        sample_num = "Sample ID",
        library = "Library",
        antigen = "Antigen",
        round = "Round",
        #replicate = "Replicate",
        approx_diversity = "Estimated diversity"
        ) %>%
    opt_table_font(font = google_font("Poppins"))
```