# Sequencing QC

```{r}
#| echo: false
#| message: false
#| warning: false
# annoyingly, we need to source our pre-render script for each chapter in the book
source("./template/pre_render_script.R")
```

## MultiQC report {#multiqc_report}

Full sequencing run QC is available in the multiQC[@Ewels2016] report, but not all sections are necessary for our application. In my opinion, these are the most important things we need to look at:

### Sequence counts {#sequence_counts}

Ideally, we want \~100,000 reads for round 2, \~500,000 reads for round 1 and \~2,000,000 reads for round zero to be confident we are close to saturation. These values are indicated on the graph.

<details class="secondaryDetails">

<summary>What if there are fewer reads?</summary>

<p>Honestly, we can probably get away with fewer reads (but of course it's better to have too many than not enough! Especially so we have some breathing room if there are lots of adapter dimers).\
Based on diversity estimates, \~ 75,000 reads for round 2, \~250,000 reads for round 1 and \~1,000,000 reads for round 0 should be enough in most cases. If we have less than this, we might still be ok but should check the sequencing saturation before proceeding with the analysis.</p>

</details>

```{r}
#| message: false
#| warning: false

# read in this summary of reads we generated during the pre-processing!
percent_passing_trim_merge <- vroom("percentage_passing_trim_merge.tsv")

# define the ideal numbers of reads that we will draw lines for on the plot
ideal_thresholds <- data.frame(
    round = c(0, 1, 2), threshold = c(2000000, 500000, 100000))

# plot the data
percent_passing_trim_merge %>%
    left_join(metadata, by = c("sequence_id" = "sample_num")) %>%
    mutate(round = as.factor(floor(round))) %>% # round to factor
    ggplot(aes(x = sequence_id, y = num_reads_after, fill = round)) +
        geom_col() +
        geom_hline(data = ideal_thresholds, aes(yintercept = threshold),
                   colour="#002060") +
        scale_fill_manual(values = colour_palette) +
        ylab("Number of read pairs") +
        xlab("Sample ID") +
        ggtitle("Number of read pairs") +
        theme(axis.text.x = element_text(angle = 90, size = 10, vjust = 0.5)) +
        facet_grid(~round, scales = "free_x", space = "free")
```

### Sequence quality histograms

Ideally the quality should be in the green zone (\>Q28) across all bases of the reads. It's not unusual though for it to dip into the yellow, particularly towards the end of R2.

<details class="secondaryDetails">

<summary>What if the quality is worse than that?</summary>

<p>When using MiSeq (instead of NextSeq\*) it's likely that the quality, particularly in R2 will drop off quite quickly. As part of the pre-processing, reads will be trimmed to a minimum quality of Q20 (99.9% accurate) before proceeding with downstream analyses. So, it only affects our downstream results in so far as that we might be left with fewer reads (because after trimming off low-quality parts, there might not be enough left to merge the reads).\
\* if you see quality dipping into the red on NextSeq runs then something has gone wrong!</p>

</details>

\

![](mqc_fastqc_per_base_sequence_quality_plot_1.png)

### Per sequence quality scores {#meanquality}

There should be a strong peak in the green zone (\>Q28) for all samples.

<details class="secondaryDetails">

<summary>What if the peak isn't in the green zone?</summary>

<p>If the peak is in the yellow or red zones, something has gone terribly wrong!</p>

</details>

\

![](mqc_fastqc_per_sequence_quality_scores_plot_1.png)

### Per sequence GC content

There should be a single peak \~55% GC content.

<details class="secondaryDetails">

<summary>What if there are multiple peaks?</summary>

<p>

Given the homogenous nature of nanobodies, we expect only one peak. The presence of multiple peaks suggests that either:

1.  The data probably wasn't demultiplexed well, and so there are some spike-ins mixed with the nanobody reads.

2.  There are high levels of adapter dimers (in NextSeq data this commonly results in peaks at very high GC content, as adapter dimer reads have a lot of G's due to the dark cycle)

Neither of these are critical issues, they just 'waste' some of our sequencing and so we must ensure that we still have enough reads after taking them into consideration

</p>

</details>

![](mqc_fastqc_per_sequence_gc_content_plot_Percentages.png)

## Adapter dimers {#adapter_dimers}

One common problem we can encounter with this protocol is the presence of adapter dimers. These manifest as a low percentage of reads passing through the trimming and merging process. You can check this table to see which samples (if any) had a problem with adapter dimers, and whether they will still have enough reads to meet the [thresholds outlined above](#sequence_counts). You might also want to look at whether any of the various metadata columns seem to correlate in any way with adapter dimer levels.

```{r}
#| echo: false
#| message: false

percent_passing_trim_merge %>%
    arrange(percentage_passing_trim_merge) %>%
    left_join(metadata, by = c("sequence_id" = "sample_num")) %>%
    select(-c(num_reads_before, replicate_id_informative,
             panning_id)) %>%
    relocate(c(percentage_passing_trim_merge, num_reads_after), .after = "sequence_id") %>%
    gt() %>% # make the table using gt package
    opt_interactive(
        use_highlight = TRUE,
        use_filters = TRUE,
        use_compact_mode = TRUE) %>% # interactive, highlight rows as you hover over
    tab_options(
        ihtml.use_page_size_select = TRUE, # choose page size
        ihtml.page_size_default = 10,
        ihtml.page_size_values = c(5, 10, 20, 30)) %>%
    tab_header(
        title = "Percentage of reads passing through the trimming and merging process",
        subtitle = "Calculated as the number of raw R1, divided by the number of merged reads"
      ) %>%
    cols_label(
        sequence_id = "Sample ID",
        library = "Library",
        antigen = "Antigen",
        round = "Round",
        #replicate = "Replicate", # TO DO: work out an ifelse or something here
        #replicate_id = "Replicate ID", # because it throws an error if these columns arent present
        num_reads_after = "# of reads remaining",
        percentage_passing_trim_merge = "%"
        ) %>%
    text_replace(pattern = "_", replacement = " ") %>%
    opt_table_font(font = google_font("Poppins")) %>%
    data_color(columns = percentage_passing_trim_merge, palette =
      colorRampPalette(c("#63be7b", "#ffeb84", "#f87274"))(11), reverse = TRUE, method = "bin",
        bins = c(100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 0))
```